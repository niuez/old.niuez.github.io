{"categories":[],"posts":[{"content":"移植テストです\n書いて置かないと頭に置いておけない気がしたのでメモを残す. 間違ってたらごめん\nこれについて気になったので\nメビウス関数とかを導入するとより形式的に約数とかを扱えるようになるのかなあ\n\u0026mdash; Niuez (@xiuez) January 22, 2020  概要  約数畳み込み メビウス関数 メビウスの反転公式(約数畳み込みの逆操作) 約数畳み込みと逆約数畳み込みのアルゴリズム $O(A \\log{\\log A})$ 最大公約数の扱い 集合の扱い AGC038C LCMsの解き方  ネタバレあるので気をつけてください\n約数畳み込み 関数$f(n)$に対する約数畳み込みとは,\n$\\begin{eqnarray} g(n) = \\sum_{ d | n } f(d) \\end{eqnarray}$\nあとで解説しますが, 方針としてはこの畳み込んだ後の$g(n)$を問題を解けるように定義してやることでGCDを綺麗に扱うことができます.\nメビウス関数 実際に$g(n)$を定義してみます. 一番有名なのは$g(n) = \\delta(n, 1)$です. $\\delta(n, 1)$はクロネッカーのデルタです. このとき,\n$\\begin{eqnarray} g(n) = \\delta(n, 1) = \\sum_{ d | n } f(d) \\end{eqnarray}$\nを満たす$f(n)$はメビウス関数と呼ばれ, $\\mu(n)$と書きます.(メビウス関数 - Wikipedia)\nメビウスの反転公式(約数畳み込みの逆操作) 上の式のままだと, $f(n)$を導くのは困難です. ここで登場するのがメビウスの反転公式です. これは, 約数畳み込みの逆操作に当たります.\n$$ \\begin{eqnarray} g(n) \u0026amp;=\u0026amp; \\sum_{ d | n } f(d) \\\\\nf(n) \u0026amp;=\u0026amp; \\sum_{ d | n } g(d) \\mu(\\frac{n}{d}) \\end{eqnarray} $$\nこれで$g(n)$を定義してから反転公式を適用することで$f(n)$を導くことができます.\n約数畳み込みと逆約数畳み込みのアルゴリズム 約数畳み込みとその逆はnoshi91さんが計算量$O(A \\log{\\log A})$で計算するアルゴリズムの記事を紹介しています.\nhttp://noshi91.hatenablog.com/entry/2018/12/27/121649\n逆約数畳み込みの実装例\ntemplate \u0026lt;class T\u0026gt; void inverse_divisor_transform(vector\u0026lt;T\u0026gt; \u0026amp;a) { int n = a.size(); vector\u0026lt;bool\u0026gt; sieve(n, true); for (int p = 2; p \u0026lt; n; ++p) { if (sieve[p]) { for (int k = (n - 1) / p; k \u0026gt; 0; --k) { sieve[k * p] = false; a[k * p] -= a[k]; } } } }  最大公約数の扱い 自然数$n, m$に対して,\n$\\begin{eqnarray} \\sum_{d | n, d | m} f(d) \\end{eqnarray}$\nを考えると,\n$$ \\begin{eqnarray} \\sum_{d | n, d | m} f(d) \u0026amp;=\u0026amp; \\sum_{d | \\gcd(n, m)} f(d) \\\\\n\u0026amp;=\u0026amp; g(\\gcd(n, m)) \\end{eqnarray} $$\nとなり, $\\gcd(n, m)$に対する操作ができます. 例えば, $f(n) = \\mu(n), g(n) = \\delta(n, 1)$とすると, $g(\\gcd(n, m))$は,「$n, m$が互いに素であれば$1$, そうでなければ$0$」となり, 互いに素かどうかの判定ができます.\n集合の扱い 例えば, $c_m(d) = [d | m$]という関数($d$が$m$を割り切るなら$1$, そうでなければ$0$)を考えると,\n$$ \\sum_{d | n, d | m} f(d) = \\sum_{ d | n } f(d) c_m(d) $$\nと変形できます.\nこれを応用します. 自然数の集合$S$ を考え, $c(d) = \\sum_{m \\in S} c_m(d)$とすると,\n$$ \\begin{eqnarray} \\sum_{d | n} f(d) c(d) \u0026amp;=\u0026amp; \\sum_{m \\in S}\\sum_{d | n} f(d) c_m(d) \\\\\n\u0026amp;=\u0026amp; \\sum_{m \\in S} g(\\gcd(n, m)) \\end{eqnarray} $$\nとなります.\n$f(n) = \\mu(n), g(n) = \\delta(n, 1)$を考えてみると, 「集合$S$の中に$n$と互いに素な要素の数」を計算しています.\nAGC038C LCMsを解く AGC038 C - LCMs $lcm(x, y) = x (\\frac{y}{\\gcd(x, y)})$と変形します. 約数畳み込みを使う方針でやると, この$(\\frac{y}{\\gcd(x, y)})$が最後に来てほしい気持ちになります. $g(n) = \\frac{1}{n}$と置くと,\n$$ \\begin{eqnarray} \\frac{y}{\\gcd(x, y)} \u0026amp;=\u0026amp; y \\cdot g(\\gcd(x, y)) \\\\\n\u0026amp;=\u0026amp; \\sum_{d | gcd(x, y)} f(d) y \\\\\n\u0026amp;=\u0026amp; \\sum_{d | x, d | y} f(d) y \\\\\n\u0026amp;=\u0026amp; \\sum_{d | x} f(d) s_y(d) \\end{eqnarray} $$\nここで$s_y(d)$を「$d$が$y$を割り切るなら$y$, そうでなければ$0$」としました.\n応用して, 自然数の集合$S$ を考え, $s(d) = \\sum_{m \\in S} s_m(d)$とすると,\n$$ \\begin{eqnarray} \\sum_{d | x} f(d) s(d) \u0026amp;=\u0026amp; \\sum_{y \\in S}\\sum_{d | x} f(d) s_y(d) \\\\\n\u0026amp;=\u0026amp; \\sum_{y \\in S} y \\cdot g(\\gcd(x, y)) \\end{eqnarray} $$\nと計算できて, これに$x$を掛けると「集合$S$の中の各要素と$x$の最大公約数の和」を計算できました.\n計算量は, $O(A \\log{\\log A} + N \\sqrt A)$です.\nC - LCMs の僕の提出\nソースコード\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; using i64 = long long; #define rep(i,s,e) for(i64 (i) = (s);(i) \u0026lt; (e);(i)++) /* modint */ /* IO(niu::fin, niu::fout) */ const i64 MOD = 998244353; using fp = modint\u0026lt;MOD\u0026gt;; #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; using i64 = long long; template \u0026lt;class T\u0026gt; void inverse_divisor_transform(vector\u0026lt;T\u0026gt; \u0026amp;a) { int n = a.size(); vector\u0026lt;bool\u0026gt; sieve(n, true); for (int p = 2; p \u0026lt; n; ++p) { if (sieve[p]) { for (int k = (n - 1) / p; k \u0026gt; 0; --k) { sieve[k * p] = false; a[k * p] -= a[k]; } } } } constexpr i64 A = 1e6 + 1; int main() { std::vector\u0026lt;fp\u0026gt; f(A); rep(d,1,A) { f[d] = fp(d).pow(MOD - 2); } inverse_divisor_transform(f); i64 N; niu::fin \u0026gt;\u0026gt; N; vector\u0026lt;fp\u0026gt; sum(A); fp ans = 0; rep(i,0,N) { int x; niu::fin \u0026gt;\u0026gt; x; fp res = 0; for(int d = 1; d * d \u0026lt;= x; d++) { if(x % d == 0) { res += f[d] * sum[d]; sum[d] += fp(x); if(x / d != d) { res += f[x / d] * sum[x / d]; sum[x / d] += fp(x); } } } ans += res * fp(x); } niu::fout \u0026lt;\u0026lt; ans.value() \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;; }  ","id":0,"section":"posts","summary":"移植テストです 書いて置かないと頭に置いておけない気がしたのでメモを残す. 間違ってたらごめん これについて気になったので メビウス関数とかを導入す","tags":null,"title":"約数畳み込みを使って最大公約数と集合をうまく扱うメモ","uri":"https://niuez.github.io/2020/02/divisor_transform_memo/","year":"2020"},{"content":"はじめまして\nいつはてなブログが消えてもおかしくない気がするので, 僕のはてなブログからこっちに移してこようかなと考えてます.\nテスト期間真っ最中なので春休みに入ったらやろうかな.\nにう\n","id":1,"section":"posts","summary":"はじめまして いつはてなブログが消えてもおかしくない気がするので, 僕のはてなブログからこっちに移してこようかなと考えてます. テスト期間真っ最中","tags":null,"title":"First","uri":"https://niuez.github.io/2020/02/first/","year":"2020"}],"tags":[]}